{
  "$schema": "http://json-schema.org/draft-07/schema",
  "title": "Genomic Variation",
  "description": "Schema for a genomic variation entry.",
  "type":"object",
  "properties": {
    "variantId": {
      "description": "Reference to variant ID (internal ID).\n",
      "type": "string"
    },
    "assemblyId": {
      "description": "Genomic assembly accession and version as RefSqeq assembly accession (e.g. \"GCG 000001405.39\")\nor a versioned assembly name or synonym such as UCSC Genome Browser assembly (e.g. \"hg38\") or\nGenome Reference consortium Human (e.g. \"GRCh38.p13\") names.\n",
      "type": "string",
      "example": [
        "GCG 000001405.39",
        "hg38",
        "GRCh38.p13"
      ]
    },
    "refseqId": {
      "description": "Reference sequence Refseq ID and version for genomic reference sequence in which\nvariant coordinates are given, e.g. \"NC 000009\" for human chromosome 9.\nAlternatively, names, synonymous or aliases e.g. \"Chr9\" when\nassemblyId is given. For organisms with a single reference sequence covering the genome,\nthe versioned Refseq ID can be given here as an alternative to the assembly ID and\nversion in assemblyId, e.g. \"NC 045512.2\" for SARS-CoV2 full-length genome reference sequence.\n",
      "type": "string",
      "example": [
        "NC 000009",
        "Chr9",
        "NC 045512.2"
      ]
    },
    "start": {
      "description": "Precise or fuzzy start coordinate position(s), allele locus\n(0-based, inclusive).\n* `start` only:\n  - for single positions, e.g. the start of a specified sequence\n  alteration where the size is given through the specified\n  `alternateBases`\n  - typical use are queries for SNV and small InDels\n  - the use of `start` without an `end` parameter requires the use\n  of `alternateBases`\n\n* `start` and `end`:\n  - for searching any variant falling fully or partially within the\n  range between `start` and `end` (a.k.a. \"range query\")\n  - additional use of `variantType` OR `alternateBases` can limit the\n  scope of the query\n  - by convention, partial overlaps of variants with the indicated\n  genomic range are accepted; for specific overlap requirements the\n  4-parammeter \"Bracket Queries\" should be employed\n* use of 2 values in both `start` and `end` for constructing a\n\"Bracket Query\":\n  - can be used to match any contiguous genomic interval, e.g. for\n  querying imprecise positions\n    * identifying all structural variants starting between `start[0]`\n    and `start[1]`, and ending between `end[0]` <-> `end[1]`\n    * single or double sided precise matches can be achieved by\n    setting `start[1]=start[0]+1` and `end[1]=end[0]+1`\n",
      "type": "array",
      "items": {
        "type": "integer",
        "format": "int64",
        "minimum": 0
      },
      "minItems": 1,
      "maxItems": 2
    },
    "end": {
      "description": "Precise or bracketing the end of the variants of interest:\n* (0-based, exclusive) - see `start`\n* for bracket queries, provide 2 values (e.g. [111,222]).\n",
      "type": "array",
      "items": {
        "type": "integer",
        "format": "int64",
        "minimum": 1
      },
      "minItems": 0,
      "maxItems": 2
    },
    "ReferenceBases": {
      "description": "Reference bases for this variant (starting from `start`). * Accepted values: [ACGTN]*. * N is a wildcard, that denotes the position of any base, and can be used as a standalone base of any type or within a partially known sequence. As example, a query of `ANNT` the Ns can take take any form of [ACGT] and will match `ANNT`, `ACNT`, `ACCT`, `ACGT` ... and so forth. * an *empty value* is used in the case of insertions with the maximally trimmed, inserted sequence being indicated in `AlternateBases`\n",
      "type": "string",
      "pattern": "^([ACGTN]*)$"
    },
    "AlternateBases": {
      "description": "Alternate bases for this variant (starting from `start`).\n* Accepted values: [ACGTN]*.\n* N is a wildcard, that denotes the position of any base, and can be\nused as a standalone base of any type or within a partially known\nsequence. As example, a query of `ANNT` the Ns can take take any form of\n[ACGT] and will match `ANNT`, `ACNT`, `ACCT`, `ACGT` ... and so forth.\n* an *empty value* is used in the case of deletions with the maximally\ntrimmed, deleted sequence being indicated in `ReferenceBases`\n* Categorical variant queries, e.g. such *not* being represented through\nsequence & position, make use of the `variantType` parameter.\n* either `alternateBases` or `variantType` is required.\n",
      "type": "string",
      "pattern": "^([ACGTN]*)$"
    },
    "variantType": {
      "description": "The `variantType` is used to query variants which are not defined\nthrough a sequence of one or more bases using the `alternateBases`\nparameter. Examples here are e.g. structural variants:\n* DUP\n  - increased allelic count of material from the genomic region\n  between `start` and `end` positions\n  - no assumption about the placement of the additional sequences is\n  being made (i.e. no _in situ_ requirement as tandem duplications)\n* DEL: deletion of sequence following `start`\n* BND: breakend, i.e. termination of the allele at position\n      `start` or in the `startMin` => `startMax` interval, or fusion\n      of the sequence to distant partner\nEither `alternateBases` or `variantType` is required, with the\nexception of range queries (single `start` and `end` parameters).\n",
      "type": "string",
      "examples": ["DEL","DUP"]
    }
  },
  "required": ["variantId","assemblyId","refseqId","start","end","AlternateBases"]
  , "additionalProperties": true
}